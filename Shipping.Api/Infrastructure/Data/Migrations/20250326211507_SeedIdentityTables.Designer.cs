// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shipping.Api.Infrastructure.Data;

#nullable disable

namespace Shipping.Api.Data.Migrations
{
    [DbContext(typeof(ShippingContext))]
    [Migration("20250326211507_SeedIdentityTables")]
    partial class SeedIdentityTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "permissions",
                            ClaimValue = "Permissions:ViewPermissions",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "permissions",
                            ClaimValue = "Permissions:AddPermissions",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "permissions",
                            ClaimValue = "Permissions:UpdatePermissions",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "permissions",
                            ClaimValue = "Permissions:DeletePermissions",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "permissions",
                            ClaimValue = "Settings:ViewSettings",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "permissions",
                            ClaimValue = "Settings:AddSettings",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "permissions",
                            ClaimValue = "Settings:UpdateSettings",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "permissions",
                            ClaimValue = "Settings:DeleteSettings",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "permissions",
                            ClaimValue = "Bank:ViewBank",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "permissions",
                            ClaimValue = "Bank:AddBank",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "permissions",
                            ClaimValue = "Bank:UpdateBank",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "permissions",
                            ClaimValue = "Bank:DeleteBank",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "permissions",
                            ClaimValue = "MoneySafe:ViewMoneySafe",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "permissions",
                            ClaimValue = "MoneySafe:AddMoneySafe",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "permissions",
                            ClaimValue = "MoneySafe:UpdateMoneySafe",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "permissions",
                            ClaimValue = "MoneySafe:DeleteMoneySafe",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "permissions",
                            ClaimValue = "Branches:ViewBranches",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "permissions",
                            ClaimValue = "Branches:AddBranches",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "permissions",
                            ClaimValue = "Branches:UpdateBranches",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "permissions",
                            ClaimValue = "Branches:DeleteBranches",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "permissions",
                            ClaimValue = "Employees:ViewEmployees",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "permissions",
                            ClaimValue = "Employees:AddEmployees",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "permissions",
                            ClaimValue = "Employees:UpdateEmployees",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "permissions",
                            ClaimValue = "Employees:DeleteEmployees",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "permissions",
                            ClaimValue = "Merchants:ViewMerchants",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "permissions",
                            ClaimValue = "Merchants:AddMerchants",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 27,
                            ClaimType = "permissions",
                            ClaimValue = "Merchants:UpdateMerchants",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 28,
                            ClaimType = "permissions",
                            ClaimValue = "Merchants:DeleteMerchants",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 29,
                            ClaimType = "permissions",
                            ClaimValue = "Couriers:ViewCouriers",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 30,
                            ClaimType = "permissions",
                            ClaimValue = "Couriers:AddCouriers",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 31,
                            ClaimType = "permissions",
                            ClaimValue = "Couriers:UpdateCouriers",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 32,
                            ClaimType = "permissions",
                            ClaimValue = "Couriers:DeleteCouriers",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 33,
                            ClaimType = "permissions",
                            ClaimValue = "Regions:ViewRegions",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 34,
                            ClaimType = "permissions",
                            ClaimValue = "Regions:AddRegions",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 35,
                            ClaimType = "permissions",
                            ClaimValue = "Regions:UpdateRegions",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 36,
                            ClaimType = "permissions",
                            ClaimValue = "Regions:DeleteRegions",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 37,
                            ClaimType = "permissions",
                            ClaimValue = "Cities:ViewCities",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 38,
                            ClaimType = "permissions",
                            ClaimValue = "Cities:AddCities",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 39,
                            ClaimType = "permissions",
                            ClaimValue = "Cities:UpdateCities",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 40,
                            ClaimType = "permissions",
                            ClaimValue = "Cities:DeleteCities",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 41,
                            ClaimType = "permissions",
                            ClaimValue = "Orders:ViewOrders",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 42,
                            ClaimType = "permissions",
                            ClaimValue = "Orders:AddOrders",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 43,
                            ClaimType = "permissions",
                            ClaimValue = "Orders:UpdateOrders",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 44,
                            ClaimType = "permissions",
                            ClaimValue = "Orders:DeleteOrders",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 45,
                            ClaimType = "permissions",
                            ClaimValue = "OrderReports:ViewOrderReports",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 46,
                            ClaimType = "permissions",
                            ClaimValue = "OrderReports:AddOrderReports",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 47,
                            ClaimType = "permissions",
                            ClaimValue = "OrderReports:UpdateOrderReports",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 48,
                            ClaimType = "permissions",
                            ClaimValue = "OrderReports:DeleteOrderReports",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 49,
                            ClaimType = "permissions",
                            ClaimValue = "Accounts:ViewAccounts",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 50,
                            ClaimType = "permissions",
                            ClaimValue = "Accounts:AddAccounts",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 51,
                            ClaimType = "permissions",
                            ClaimValue = "Accounts:UpdateAccounts",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        },
                        new
                        {
                            Id = 52,
                            ClaimType = "permissions",
                            ClaimValue = "Accounts:DeleteAccounts",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "0195d439-9ca1-7873-9c14-a4bc1c201593",
                            RoleId = "0195d439-9ca1-7873-9c14-a4bc1c201593"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0195d439-9ca1-7873-9c14-a4bc1c201593",
                            ConcurrencyStamp = "0195d43b-a808-757b-9c3e-bf90c6091133",
                            CreatedAt = new DateTime(2025, 3, 26, 23, 15, 7, 93, DateTimeKind.Local).AddTicks(1125),
                            IsDeleted = false,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<decimal?>("CanceledOrder")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("DeductionCompanyFromOrder")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("DeductionTypes")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<decimal?>("PickupPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CityId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RegionId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0195d439-9ca1-7873-9c14-a4bc1c201593",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0195d43b-a808-757b-9c3e-bf90c6091133",
                            CreatedAt = new DateTime(2025, 3, 26, 23, 15, 7, 75, DateTimeKind.Local).AddTicks(9242),
                            Email = "admin@shipping.com",
                            EmailConfirmed = false,
                            FullName = "Shipping Admin",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SHIPPING.COM",
                            NormalizedUserName = "ADMIN@SHIPPING.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAENjhApHkXoZCzVm4OAcNZ40XVOPdDiUlQDjgVhhbWsOrkW3EreaeJiAyBoqYUO8GJQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0195d43be3f271878cc37be7dfc34361",
                            TwoFactorEnabled = false,
                            UserName = "admin@shipping.com"
                        });
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BranchDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.CitySetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<decimal>("StandardShippingCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("pickupShippingCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("CitySettings");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.CourierReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourierId");

                    b.HasIndex("OrderId");

                    b.ToTable("CourierReports");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("CitySettingId")
                        .HasColumnType("int");

                    b.Property<string>("CourierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerPhone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOutOfCityShipping")
                        .HasColumnType("bit");

                    b.Property<string>("MerchantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrderCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PaymentType")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int?>("ShippingTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalWeight")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CitySettingId");

                    b.HasIndex("RegionId");

                    b.HasIndex("ShippingTypeId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.OrderReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReportDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderReports");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Governorate")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.ShippingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShippingTypes");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.SpecialCityCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CitySettingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("MerchantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CitySettingId");

                    b.HasIndex("MerchantId");

                    b.ToTable("SpecialCityCosts");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.SpecialCourierRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CourierId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourierId");

                    b.HasIndex("RegionId");

                    b.ToTable("GetSpecialCourierRegions");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.WeightSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CostPerKg")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("MaxWeight")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MinWeight")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("WeightSettings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Shipping.Api.Core.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Shipping.Api.Core.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Shipping.Api.Core.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Shipping.Api.Core.Domain.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Api.Core.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Shipping.Api.Core.Domain.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.ApplicationUser", b =>
                {
                    b.HasOne("Shipping.Api.Core.Domain.Models.Branch", "Branch")
                        .WithMany("Users")
                        .HasForeignKey("BranchId");

                    b.HasOne("Shipping.Api.Core.Domain.Models.CitySetting", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId");

                    b.HasOne("Shipping.Api.Core.Domain.Models.Region", "Region")
                        .WithMany("Users")
                        .HasForeignKey("RegionId");

                    b.Navigation("Branch");

                    b.Navigation("City");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.Branch", b =>
                {
                    b.HasOne("Shipping.Api.Core.Domain.Models.Region", "Region")
                        .WithMany("Branches")
                        .HasForeignKey("RegionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.CitySetting", b =>
                {
                    b.HasOne("Shipping.Api.Core.Domain.Models.Region", "Region")
                        .WithMany("CitySettings")
                        .HasForeignKey("RegionId");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.CourierReport", b =>
                {
                    b.HasOne("Shipping.Api.Core.Domain.Models.ApplicationUser", "Courier")
                        .WithMany("CourierReports")
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Api.Core.Domain.Models.Order", "Order")
                        .WithMany("CouriersReport")
                        .HasForeignKey("OrderId");

                    b.Navigation("Courier");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.Order", b =>
                {
                    b.HasOne("Shipping.Api.Core.Domain.Models.ApplicationUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("Shipping.Api.Core.Domain.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("Shipping.Api.Core.Domain.Models.CitySetting", "CitySetting")
                        .WithMany("Orders")
                        .HasForeignKey("CitySettingId");

                    b.HasOne("Shipping.Api.Core.Domain.Models.Region", "Region")
                        .WithMany("Orders")
                        .HasForeignKey("RegionId");

                    b.HasOne("Shipping.Api.Core.Domain.Models.ShippingType", "ShippingType")
                        .WithMany("Branches")
                        .HasForeignKey("ShippingTypeId");

                    b.Navigation("Branch");

                    b.Navigation("CitySetting");

                    b.Navigation("Region");

                    b.Navigation("ShippingType");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.OrderReport", b =>
                {
                    b.HasOne("Shipping.Api.Core.Domain.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.Product", b =>
                {
                    b.HasOne("Shipping.Api.Core.Domain.Models.Order", "Order")
                        .WithMany("Products")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.SpecialCityCost", b =>
                {
                    b.HasOne("Shipping.Api.Core.Domain.Models.CitySetting", "CitySetting")
                        .WithMany("SpecialPickups")
                        .HasForeignKey("CitySettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Api.Core.Domain.Models.ApplicationUser", "Merchant")
                        .WithMany("SpecialPickups")
                        .HasForeignKey("MerchantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CitySetting");

                    b.Navigation("Merchant");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.SpecialCourierRegion", b =>
                {
                    b.HasOne("Shipping.Api.Core.Domain.Models.ApplicationUser", "Courier")
                        .WithMany("SpecialCourierRegion")
                        .HasForeignKey("CourierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shipping.Api.Core.Domain.Models.Region", "Region")
                        .WithMany("SpecialCourierRegion")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courier");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.ApplicationUser", b =>
                {
                    b.Navigation("CourierReports");

                    b.Navigation("Orders");

                    b.Navigation("SpecialCourierRegion");

                    b.Navigation("SpecialPickups");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.Branch", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.CitySetting", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("SpecialPickups");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.Order", b =>
                {
                    b.Navigation("CouriersReport");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.Region", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("CitySettings");

                    b.Navigation("Orders");

                    b.Navigation("SpecialCourierRegion");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Shipping.Api.Core.Domain.Models.ShippingType", b =>
                {
                    b.Navigation("Branches");
                });
#pragma warning restore 612, 618
        }
    }
}
